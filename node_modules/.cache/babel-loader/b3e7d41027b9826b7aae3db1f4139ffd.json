{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\abanm\\\\Desktop\\\\ADG-Recruitment-Portal-2k20\\\\src\\\\components\\\\Quiz\\\\TechQuiz.js\";\nimport React from \"react\";\nimport \"./Quiz.css\";\nimport Timer from \"./Timer\";\nimport Background from \"../../hoc/Background/Background\";\nimport { Redirect } from \"react-router-dom\";\nimport Modal from \"../Modals/Modal\";\n\nclass TechQuiz extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selectedOptions = [];\n    this.optionsArray = [\"a\", \"b\", \"c\", \"d\"];\n    this.state = {\n      quizQuestions: [],\n      currentQuestionIndex: 0,\n      questionId: [],\n      finalResponse: [],\n      optionsIndex1: [\"d\", \"d\", \"d\", \"e\", \"e\", \"e\", \"e\", \"e\", \"e\", \"e\"],\n      optionsIndex: [\"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\"],\n      showModal: false,\n      blueButton: \"blueButton\",\n      blackButton: \"blackButton\"\n    };\n    this.submitQuiz = this.submitQuiz.bind(this);\n    this.showModal1 = this.showModal1.bind(this);\n    this.hideModal = this.hideModal.bind(this);\n  }\n\n  showModal1() {\n    this.setState({\n      showModal: true\n    });\n  }\n\n  hideModal() {\n    this.setState({\n      showModal: false\n    });\n  }\n\n  async getQuizQuestions() {\n    await fetch(\"https://adgrecruitments.herokuapp.com/questions/technical/get-quiz-questions/1/web\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": sessionStorage.getItem(\"Token\")\n      }\n    }).then(response => {\n      return response.json();\n    }).then(data => {\n      this.setState({\n        quizQuestions: data\n      });\n      this.generateResponse();\n    }).catch(error => {\n      alert(error.message);\n    });\n  }\n\n  async submitQuiz() {\n    await fetch(\"https://adgrecruitments.herokuapp.com/user/technical/submit\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": sessionStorage.getItem(\"Token\")\n      },\n      body: JSON.stringify(this.state.finalResponse)\n    }).then(response => {\n      this.props.history.push(\"thank-you\");\n      return response.json();\n    }).catch(error => {\n      alert(error.message);\n    });\n  }\n\n  getResponse() {\n    return this.state.finalResponse[this.state.currentQuestionIndex];\n  }\n\n  updateOption(qid, index) {\n    this.state.finalResponse.forEach(question => {\n      if (question.qid === qid) {\n        question.response = this.optionsArray[index];\n        this.setState({\n          blueButton: \"blackButton\"\n        });\n      }\n    });\n  }\n\n  generateResponse() {\n    this.state.quizQuestions.forEach(question => {\n      var temp = {\n        qid: question._id,\n        response: \"e\"\n      };\n      this.state.finalResponse.push(temp);\n    });\n  }\n\n  returnQuestionID() {\n    return this.state.quizQuestions[this.state.currentQuestionIndex]._id;\n  }\n\n  gotoNextQuestion() {\n    if (this.state.currentQuestionIndex < this.state.quizQuestions.length - 1) {\n      this.setState({\n        currentQuestionIndex: this.state.currentQuestionIndex + 1,\n        blueButton: \"blueButton\"\n      });\n    } else return;\n  }\n\n  gotoPreviousQuestion() {\n    if (this.state.currentQuestionIndex > 0) this.setState({\n      currentQuestionIndex: this.state.currentQuestionIndex - 1,\n      blueButton: \"blueButton\"\n    });else return;\n  }\n\n  componentDidMount() {\n    this.getQuizQuestions();\n  }\n\n  componentWillUnmount() {\n    this.submitQuiz();\n  }\n\n  render() {\n    if (!sessionStorage.getItem(\"Token\")) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Background, {\n      children: this.state.quizQuestions.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"heading\",\n          children: \"Technical Quiz\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"question-count\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Question \", this.state.currentQuestionIndex + 1]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 17\n            }, this), \"/\", this.state.quizQuestions.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tech-quiz\",\n            children: this.state.quizQuestions[this.state.currentQuestionIndex].questionDescription\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"answer-section\",\n            children: Object.keys(this.state.quizQuestions[this.state.currentQuestionIndex].options).map((key, index) => {\n              if (this.state.finalResponse[this.state.currentQuestionIndex] === undefined) {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  onClick: () => {\n                    this.updateOption(this.returnQuestionID(), index);\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: this.state.blackButton,\n                    value: this.optionsArray[index],\n                    children: [this.optionsArray[index], \".\", \" \", this.state.quizQuestions[this.state.currentQuestionIndex].options[key]]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 180,\n                    columnNumber: 25\n                  }, this)\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 23\n                }, this);\n              } else {\n                if (this.state.finalResponse[this.state.currentQuestionIndex].response === this.optionsArray[index]) {\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    onClick: () => {\n                      this.updateOption(this.returnQuestionID(), index);\n                    },\n                    children: /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: this.state.blueButton,\n                      value: this.optionsArray[index],\n                      children: [this.optionsArray[index], \".\", \" \", this.state.quizQuestions[this.state.currentQuestionIndex].options[key]]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 203,\n                      columnNumber: 27\n                    }, this)\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 198,\n                    columnNumber: 25\n                  }, this);\n                } else {\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    onClick: () => {\n                      this.updateOption(this.returnQuestionID(), index);\n                    },\n                    children: /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: this.state.blackButton,\n                      value: this.optionsArray[index],\n                      children: [this.optionsArray[index], \".\", \" \", this.state.quizQuestions[this.state.currentQuestionIndex].options[key]]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 222,\n                      columnNumber: 27\n                    }, this)\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 217,\n                    columnNumber: 25\n                  }, this);\n                }\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"btn-bottom\",\n            children: [this.state.currentQuestionIndex === 0 ? /*#__PURE__*/_jsxDEV(\"button\", {\n              disabled: true,\n              id: \"disabled-btn\",\n              children: \"Previous\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                this.gotoPreviousQuestion();\n              },\n              children: \"Previous\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 19\n            }, this), this.state.currentQuestionIndex === 9 ? /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                this.showModal1();\n              },\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                this.gotoNextQuestion();\n              },\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Modal, {\n              show: this.state.showModal,\n              onHide: this.hideModal,\n              submitQuiz: this.submitQuiz\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"timer\",\n            children: /*#__PURE__*/_jsxDEV(Timer, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default TechQuiz;","map":{"version":3,"sources":["C:/Users/abanm/Desktop/ADG-Recruitment-Portal-2k20/src/components/Quiz/TechQuiz.js"],"names":["React","Timer","Background","Redirect","Modal","TechQuiz","Component","constructor","props","selectedOptions","optionsArray","state","quizQuestions","currentQuestionIndex","questionId","finalResponse","optionsIndex1","optionsIndex","showModal","blueButton","blackButton","submitQuiz","bind","showModal1","hideModal","setState","getQuizQuestions","fetch","method","headers","sessionStorage","getItem","then","response","json","data","generateResponse","catch","error","alert","message","body","JSON","stringify","history","push","getResponse","updateOption","qid","index","forEach","question","temp","_id","returnQuestionID","gotoNextQuestion","length","gotoPreviousQuestion","componentDidMount","componentWillUnmount","render","questionDescription","Object","keys","options","map","key","undefined"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./Quiz.css\";\r\nimport Timer from \"./Timer\";\r\nimport Background from \"../../hoc/Background/Background\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Modal from \"../Modals/Modal\";\r\n\r\nclass TechQuiz extends React.Component {\r\n  selectedOptions = [];\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      quizQuestions: [],\r\n      currentQuestionIndex: 0,\r\n      questionId: [],\r\n      finalResponse: [],\r\n      optionsIndex1: [\"d\", \"d\", \"d\", \"e\", \"e\", \"e\", \"e\", \"e\", \"e\", \"e\"],\r\n      optionsIndex: [\"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\"],\r\n      showModal: false,\r\n      blueButton: \"blueButton\",\r\n      blackButton: \"blackButton\",\r\n    };\r\n    this.submitQuiz = this.submitQuiz.bind(this);\r\n    this.showModal1 = this.showModal1.bind(this);\r\n    this.hideModal = this.hideModal.bind(this);\r\n  }\r\n\r\n  showModal1() {\r\n    this.setState({\r\n      showModal: true,\r\n    });\r\n  }\r\n\r\n  hideModal() {\r\n    this.setState({\r\n      showModal: false,\r\n    });\r\n  }\r\n\r\n  async getQuizQuestions() {\r\n    await fetch(\r\n      \"https://adgrecruitments.herokuapp.com/questions/technical/get-quiz-questions/1/web\",\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"auth-token\": sessionStorage.getItem(\"Token\"),\r\n        },\r\n      },\r\n    )\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        this.setState({\r\n          quizQuestions: data,\r\n        });\r\n        this.generateResponse();\r\n      })\r\n      .catch((error) => {\r\n        alert(error.message);\r\n      });\r\n  }\r\n\r\n  async submitQuiz() {\r\n    await fetch(\"https://adgrecruitments.herokuapp.com/user/technical/submit\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\": sessionStorage.getItem(\"Token\"),\r\n      },\r\n      body: JSON.stringify(this.state.finalResponse),\r\n    })\r\n      .then((response) => {\r\n        this.props.history.push(\"thank-you\");\r\n\r\n        return response.json();\r\n      })\r\n\r\n      .catch((error) => {\r\n        alert(error.message);\r\n      });\r\n  }\r\n\r\n  optionsArray = [\"a\", \"b\", \"c\", \"d\"];\r\n\r\n  getResponse() {\r\n    return this.state.finalResponse[this.state.currentQuestionIndex];\r\n  }\r\n\r\n  updateOption(qid, index) {\r\n    this.state.finalResponse.forEach((question) => {\r\n      if (question.qid === qid) {\r\n        question.response = this.optionsArray[index];\r\n        this.setState({\r\n          blueButton: \"blackButton\",\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  generateResponse() {\r\n    this.state.quizQuestions.forEach((question) => {\r\n      var temp = {\r\n        qid: question._id,\r\n        response: \"e\",\r\n      };\r\n      this.state.finalResponse.push(temp);\r\n    });\r\n  }\r\n\r\n  returnQuestionID() {\r\n    return this.state.quizQuestions[this.state.currentQuestionIndex]._id;\r\n  }\r\n\r\n  gotoNextQuestion() {\r\n    if (this.state.currentQuestionIndex < this.state.quizQuestions.length - 1) {\r\n      this.setState({\r\n        currentQuestionIndex: this.state.currentQuestionIndex + 1,\r\n        blueButton: \"blueButton\",\r\n      });\r\n    } else return;\r\n  }\r\n\r\n  gotoPreviousQuestion() {\r\n    if (this.state.currentQuestionIndex > 0)\r\n      this.setState({\r\n        currentQuestionIndex: this.state.currentQuestionIndex - 1,\r\n        blueButton: \"blueButton\",\r\n      });\r\n    else return;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getQuizQuestions();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.submitQuiz();\r\n  }\r\n\r\n  render() {\r\n    if (!sessionStorage.getItem(\"Token\")) {\r\n      return <Redirect to='/' />;\r\n    }\r\n    return (\r\n      <Background>\r\n        {this.state.quizQuestions.length === 0 ? (\r\n          <div className='loading'>Loading...</div>\r\n        ) : (\r\n          <>\r\n            <div className='heading'>Technical Quiz</div>\r\n            <div className='question-section'>\r\n              <div className='question-count'>\r\n                <span>Question {this.state.currentQuestionIndex + 1}</span>/\r\n                {this.state.quizQuestions.length}\r\n              </div>\r\n              <div className='tech-quiz'>\r\n                {\r\n                  this.state.quizQuestions[this.state.currentQuestionIndex]\r\n                    .questionDescription\r\n                }\r\n              </div>\r\n              <div className='answer-section'>\r\n                {Object.keys(\r\n                  this.state.quizQuestions[this.state.currentQuestionIndex]\r\n                    .options,\r\n                ).map((key, index) => {\r\n                  if (\r\n                    this.state.finalResponse[\r\n                      this.state.currentQuestionIndex\r\n                    ] === undefined\r\n                  ) {\r\n                    return (\r\n                      <div\r\n                        key={index}\r\n                        onClick={() => {\r\n                          this.updateOption(this.returnQuestionID(), index);\r\n                        }}>\r\n                        <button\r\n                          className={this.state.blackButton}\r\n                          value={this.optionsArray[index]}>\r\n                          {this.optionsArray[index]}.{\" \"}\r\n                          {\r\n                            this.state.quizQuestions[\r\n                              this.state.currentQuestionIndex\r\n                            ].options[key]\r\n                          }\r\n                        </button>\r\n                      </div>\r\n                    );\r\n                  } else {\r\n                    if (\r\n                      this.state.finalResponse[this.state.currentQuestionIndex]\r\n                        .response === this.optionsArray[index]\r\n                    ) {\r\n                      return (\r\n                        <div\r\n                          key={index}\r\n                          onClick={() => {\r\n                            this.updateOption(this.returnQuestionID(), index);\r\n                          }}>\r\n                          <button\r\n                            className={this.state.blueButton}\r\n                            value={this.optionsArray[index]}>\r\n                            {this.optionsArray[index]}.{\" \"}\r\n                            {\r\n                              this.state.quizQuestions[\r\n                                this.state.currentQuestionIndex\r\n                              ].options[key]\r\n                            }\r\n                          </button>\r\n                        </div>\r\n                      );\r\n                    } else {\r\n                      return (\r\n                        <div\r\n                          key={index}\r\n                          onClick={() => {\r\n                            this.updateOption(this.returnQuestionID(), index);\r\n                          }}>\r\n                          <button\r\n                            className={this.state.blackButton}\r\n                            value={this.optionsArray[index]}>\r\n                            {this.optionsArray[index]}.{\" \"}\r\n                            {\r\n                              this.state.quizQuestions[\r\n                                this.state.currentQuestionIndex\r\n                              ].options[key]\r\n                            }\r\n                          </button>\r\n                        </div>\r\n                      );\r\n                    }\r\n                  }\r\n                })}\r\n              </div>\r\n              <div className='btn-bottom'>\r\n                {this.state.currentQuestionIndex === 0 ? (\r\n                  <button disabled={true} id='disabled-btn'>\r\n                    Previous\r\n                  </button>\r\n                ) : (\r\n                  <button\r\n                    onClick={() => {\r\n                      this.gotoPreviousQuestion();\r\n                    }}>\r\n                    Previous\r\n                  </button>\r\n                )}\r\n                {this.state.currentQuestionIndex === 9 ? (\r\n                  <button\r\n                    onClick={() => {\r\n                      this.showModal1();\r\n                    }}>\r\n                    Submit\r\n                  </button>\r\n                ) : (\r\n                  <button\r\n                    onClick={() => {\r\n                      this.gotoNextQuestion();\r\n                    }}>\r\n                    Next\r\n                  </button>\r\n                )}\r\n                <Modal\r\n                  show={this.state.showModal}\r\n                  onHide={this.hideModal}\r\n                  submitQuiz={this.submitQuiz}\r\n                />\r\n              </div>\r\n              <div className='timer'>\r\n                <Timer />\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </Background>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TechQuiz;\r\n"]},"metadata":{},"sourceType":"module"}